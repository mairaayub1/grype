package grype

import (
	"github.com/anchore/grype/grype/db/legacy/distribution"
	v5 "github.com/anchore/grype/grype/db/v5"
	"github.com/anchore/grype/internal/log"
	"go.uber.org/zap"
)

func LoadVulnerabilityDB(cfg distribution.Config, update bool) (*v5.ProviderStore, *distribution.Status, error) {
	dbCurator, err := distribution.NewCurator(cfg)
	if err != nil {
		return nil, nil, err
	}

	if update {
		log.Debug("looking for vulnerability database updates")
		zap.S().Info("inside update of LoadVulnerabilityDB ")
		_, err := dbCurator.Update()
		zap.S().Info("err in laod vulun ", err)
		if err != nil {
			return nil, nil, err
		}
	}

	storeReader, err := dbCurator.GetStore()
	if err != nil {
		return nil, nil, err
	}
	zap.S().Info("storeReader: %+v", storeReader)

	status := dbCurator.Status()
	zap.S().Info("status: %+v", status)
	p, err := v5.NewVulnerabilityProvider(storeReader)
	if err != nil {
		return nil, &status, err
	}

	s := &v5.ProviderStore{
		VulnerabilityProvider:         p,
		VulnerabilityMetadataProvider: v5.NewVulnerabilityMetadataProvider(storeReader),
		ExclusionProvider:             v5.NewMatchExclusionProvider(storeReader),
		Closer:                        storeReader,
	}

	return s, &status, nil
}
